generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(uuid()) @db.Uuid
  username           String              @unique
  firstName          String?
  lastName           String?
  phone              String?
  email              String              @unique
  password           String
  birthDate          DateTime?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @default(now()) @updatedAt
  emailConfirmations EmailConfirmation[]
  phoneConfirmations PhoneConfirmation[]
  roles              TrUserRole[]
  Order              Order[]
}

model TrUserRole {
  id        String   @id @default(uuid()) @db.Uuid
  roleId    String   @db.Uuid
  userId    String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  role      Role     @relation(fields: [roleId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Role {
  id          String       @id @default(uuid()) @db.Uuid
  name        RoleName     @unique
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
  userRoles   TrUserRole[]
}

model EmailConfirmation {
  id               String   @id @default(uuid()) @db.Uuid
  userId           String   @db.Uuid
  confirmationCode String   @unique
  isConfirmed      Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model PhoneConfirmation {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @db.Uuid
  otpCode    String
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model SubscriptionPlan {
  id           String       @id @default(uuid()) @db.Uuid
  name         String
  price        Float
  billingCycle BillingCycle
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now()) @updatedAt
}

model Foods {
  id              String            @id @default(uuid()) @db.Uuid
  name            String
  description     String?
  price           Float
  categoryId      String
  isAvailable     Boolean           @default(false)
  imageURL        String
  timeToCook      DateTime?         @db.Timestamptz(3)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
  FoodCategory    FoodCategory[]
  FoodIngredients FoodIngredients[]
  OrderItem       OrderItem[]
}

model Category {
  id           String         @id @default(uuid()) @db.Uuid
  name         String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
  FoodCategory FoodCategory[]
}

model FoodCategory {
  id         String   @id @default(uuid()) @db.Uuid
  foodId     String   @db.Uuid
  categoryId String   @db.Uuid
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  Food       Foods    @relation(fields: [foodId], references: [id])
  Category   Category @relation(fields: [categoryId], references: [id])
}

model Ingredients {
  id              String            @id @default(uuid()) @db.Uuid
  name            String
  stock           Float
  unit            String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now()) @updatedAt
  FoodIngredients FoodIngredients[]
}

model FoodIngredients {
  id           String      @id @default(uuid()) @db.Uuid
  foodId       String      @db.Uuid
  ingredientId String      @db.Uuid
  quantity     Float
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now()) @updatedAt
  Food         Foods       @relation(fields: [foodId], references: [id])
  Ingredient   Ingredients @relation(fields: [ingredientId], references: [id])
}

model Order {
  id           String         @id @default(uuid()) @db.Uuid
  userId       String?        @db.Uuid
  tableId      String?        @db.Uuid
  status       OrderStatus    @default(PENDING)
  totalAmount  Float
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
  OrderItem    OrderItem[]
  Table        Tables[]
  KitchenOrder KitchenOrder[]
  User         User?          @relation(fields: [userId], references: [id])
}

model OrderItem {
  id        String   @id @default(uuid()) @db.Uuid
  orderId   String   @db.Uuid
  foodId    String   @db.Uuid
  quantity  Float
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  Order     Order    @relation(fields: [orderId], references: [id])
  Food      Foods    @relation(fields: [foodId], references: [id])
}

model KitchenOrder {
  id        String             @id @default(uuid()) @db.Uuid
  orderId   String             @db.Uuid
  status    KitchenOrderStatus @default(PENDING)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @default(now()) @updatedAt
  Order     Order              @relation(fields: [orderId], references: [id])
}

model Tables {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  capacity  Int
  isBooked  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  Order     Order?   @relation(fields: [orderId], references: [id])
  orderId   String?  @db.Uuid
}

enum RoleName {
  USER
  ADMINISTRATOR
}

enum BillingCycle {
  MONTHLY
  YEARLY
}

enum OrderStatus {
  PENDING
  PREPARING
  READY
  COMPLETED
}

enum KitchenOrderStatus {
  PENDING
  COOKING
  DONE
}
